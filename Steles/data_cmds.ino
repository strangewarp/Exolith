

// Store pointers to RECORD-MODE functions in PROGMEM
const CmdFunc COMMANDS[] PROGMEM = {
	genericCmd,       //  0: Unused duplicate pointer to genericCmd
	armCmd,           //  1: TOGGLE RECORDNOTES
	chanCmd,          //  2: CHANNEL
	clearCmd,         //  3: CLEAR NOTES
	clockCmd,         //  4: CLOCK-MASTER
	copyCmd,          //  5: COPY
	durationCmd,      //  6: DURATION
	genericCmd,       //  7: All possible note-entry commands
	humanizeCmd,      //  8: HUMANIZE
	octaveCmd,        //  9: OCTAVE
	pasteCmd,         // 10: PASTE
	posCmd,           // 11: SHIFT CURRENT POSITION
	qrstCmd,          // 12: QUANTIZE-RESET
	quantizeCmd,      // 13: QUANTIZE
	repeatCmd,        // 14: TOGGLE REPEAT
	rSweepCmd,        // 15: REPEAT-SWEEP
	sizeCmd,          // 16: SEQ-SIZE
	swAmtCmd,         // 17: SWING AMOUNT
	swGranCmd,        // 18: SWING GRANULARITY
	switchCmd,        // 19: SWITCH RECORDING-SEQUENCE
	tempoCmd,         // 20: BPM
	trackCmd,         // 21: TRACK
	upperBitsCmd,     // 22: UPPER CHAN BITS
	veloCmd           // 23: VELOCITY
};

// Matches control-row binary button-values to the decimal values that stand for their corresponding functions in COMMANDS
// Note: These binary values are flipped versions of what is displayed in button-key.txt
const byte KEYTAB[] PROGMEM = {
	7,  //  0, 000000:  7, genericCmd (REGULAR NOTE)
	14, //  1, 000001: 14, repeatCmd
	21, //  2, 000010: 21, trackCmd
	11, //  3, 000011: 11, posCmd
	23, //  4, 000100: 23, veloCmd
	20, //  5, 000101: 20, tempoCmd
	15, //  6, 000110: 15, rSweepCmd
	0,  //  7, 000111:  0, ignore
	9,  //  8, 001000:  9, octaveCmd
	4,  //  9, 001001:  4, clockCmd
	10, // 10, 001010: 10, pasteCmd
	0,  // 11, 001011:  0, ignore
	8,  // 12, 001100:  8, humanizeCmd
	0,  // 13, 001101:  0, ignore
	0,  // 14, 001110:  0, ignore
	3,  // 15, 001111:  3, clearCmd
	13, // 16, 010000: 13, quantizeCmd
	18, // 17, 010001: 18, swGranCmd
	12, // 18, 010010: 12, qrstCmd
	0,  // 19, 010011:  0, ignore
	5,  // 20, 010100:  5, copyCmd
	0,  // 21, 010101:  0, ignore
	0,  // 22, 010110:  0, ignore
	0,  // 23, 010111:  0, ignore
	6,  // 24, 011000:  6, durationCmd
	0,  // 25, 011001:  0, ignore
	0,  // 26, 011010:  0, ignore
	0,  // 27, 011011:  0, ignore
	0,  // 28, 011100:  0, ignore
	0,  // 29, 011101:  0, ignore
	0,  // 30, 011110:  0, ignore
	0,  // 31, 011111:  0, ignore
	1,  // 32, 100000:  1, armCmd
	19, // 33, 100001: 19, switchCmd
	17, // 34, 100010: 17, swAmtCmd
	0,  // 35, 100011:  0, ignore
	22, // 36, 100100: 22, upperBitsCmd
	0,  // 37, 100101:  0, ignore
	0,  // 38, 100110:  0, ignore
	0,  // 39, 100111:  0, ignore
	2,  // 40, 101000:  2, chanCmd
	0,  // 41, 101001:  0, ignore
	0,  // 42, 101010:  0, ignore
	0,  // 43, 101011:  0, ignore
	0,  // 44, 101100:  0, ignore
	0,  // 45, 101101:  0, ignore
	0,  // 46, 101110:  0, ignore
	0,  // 47, 101111:  0, ignore
	16, // 48, 110000: 16, sizeCmd
	0,  // 49, 110001:  0, ignore
	0,  // 50, 110010:  0, ignore
	0,  // 51, 110011:  0, ignore
	0,  // 52, 110100:  0, ignore
	0,  // 53, 110101:  0, ignore
	0,  // 54, 110110:  0, ignore
	0,  // 55, 110111:  0, ignore
	0,  // 56, 111000:  0, ignore
	0,  // 57, 111001:  0, ignore
	0,  // 58, 111010:  0, ignore
	0,  // 59, 111011:  0, ignore
	0,  // 60, 111100:  0, ignore (ERASE-WHILE-HELD is handled by other routines)
	0,  // 61, 111101:  0, ignore
	0,  // 62, 111110:  0, ignore
	0,  // 63, 111111:  0, ignore
};

// Lookup-table for all base BPM values, in microseconds-per-two-ticks
const float BPM_TABLE[] PROGMEM = {
	39062.5,   37878.788, 36764.706, 35714.286, // 32 33 34 35
	34722.222, 33783.784, 32894.737, 32051.282, // 36 37 38 39
	31250.0,   30487.805, 29761.905, 29069.767, // 40 41 42 43
	28409.091, 27777.778, 27173.913, 26595.745, // 44 45 46 47
	26041.667, 25510.204, 25000.0,   24509.804, // 48 49 50 51
	24038.462, 23584.906, 23148.148, 22727.273, // 52 53 54 55
	22321.429, 21929.825, 21551.724, 21186.441, // 56 57 58 59
	20833.333, 20491.803, 20161.29,  19841.27,  // 60 61 62 63
	19531.25,  19230.769, 18939.394, 18656.716, // 64 65 66 67
	18382.353, 18115.942, 17857.143, 17605.634, // 68 69 70 71
	17361.111, 17123.288, 16891.892, 16666.667, // 72 73 74 75
	16447.368, 16233.766, 16025.641, 15822.785, // 76 77 78 79
	15625.0,   15432.099, 15243.902, 15060.241, // 80 81 82 83
	14880.952, 14705.882, 14534.884, 14367.816, // 84 85 86 87
	14204.545, 14044.944, 13888.889, 13736.264, // 88 89 90 91
	13586.957, 13440.86,  13297.872, 13157.895, // 92 93 94 95
	13020.833, 12886.598, 12755.102, 12626.263, // 96 97 98 99
	12500.0,   12376.238, 12254.902, 12135.922, // 100 101 102 103
	12019.231, 11904.762, 11792.453, 11682.243, // 104 105 106 107
	11574.074, 11467.89,  11363.636, 11261.261, // 108 109 110 111
	11160.714, 11061.947, 10964.912, 10869.565, // 112 113 114 115
	10775.862, 10683.761, 10593.22,  10504.202, // 116 117 118 119
	10416.667, 10330.579, 10245.902, 10162.602, // 120 121 122 123
	10080.645, 10000.0,   9920.635,  9842.52,   // 124 125 126 127
	9765.625,  9689.922,  9615.385,  9541.985,  // 128 129 130 131
	9469.697,  9398.496,  9328.358,  9259.259,  // 132 133 134 135
	9191.176,  9124.088,  9057.971,  8992.806,  // 136 137 138 139
	8928.571,  8865.248,  8802.817,  8741.259,  // 140 141 142 143
	8680.556,  8620.69,   8561.644,  8503.401,  // 144 145 146 147
	8445.946,  8389.262,  8333.333,  8278.146,  // 148 149 150 151
	8223.684,  8169.935,  8116.883,  8064.516,  // 152 153 154 155
	8012.821,  7961.783,  7911.392,  7861.635,  // 156 157 158 159
	7812.5,    7763.975,  7716.049,  7668.712,  // 160 161 162 163
	7621.951,  7575.758,  7530.12,   7485.03,   // 164 165 166 167
	7440.476,  7396.45,   7352.941,  7309.942,  // 168 169 170 171
	7267.442,  7225.434,  7183.908,  7142.857,  // 172 173 174 175
	7102.273,  7062.147,  7022.472,  6983.24,   // 176 177 178 179
	6944.444,  6906.077,  6868.132,  6830.601,  // 180 181 182 183
	6793.478,  6756.757,  6720.43,   6684.492,  // 184 185 186 187
	6648.936,  6613.757,  6578.947,  6544.503,  // 188 189 190 191
	6510.417,  6476.684,  6443.299,  6410.256,  // 192 193 194 195
	6377.551,  6345.178,  6313.131,  6281.407,  // 196 197 198 199
	6250.0 // 200
};

// Lookup-table for all SWING multiplication values
const float SWING_TABLE[] PROGMEM = {
	0.0,   0.003, 0.006, 0.01,  // 0 1 2 3
	0.014, 0.018, 0.023, 0.028, // 4 5 6 7
	0.034, 0.04,  0.046, 0.053, // 8 9 10 11
	0.061, 0.068, 0.076, 0.085, // 12 13 14 15
	0.094, 0.103, 0.113, 0.123, // 16 17 18 19
	0.133, 0.144, 0.156, 0.168, // 20 21 22 23
	0.18,  0.192, 0.205, 0.219, // 24 25 26 27
	0.232, 0.247, 0.261, 0.276, // 28 29 30 31
	0.292, 0.307, 0.324, 0.34,  // 32 33 34 35
	0.357, 0.375, 0.393, 0.411, // 36 37 38 39
	0.43,  0.449, 0.468, 0.488, // 40 41 42 43
	0.508, 0.529, 0.55,  0.572, // 44 45 46 47
	0.594, 0.616, 0.639, 0.662, // 48 49 50 51
	0.686, 0.71,  0.734, 0.759, // 52 53 54 55
	0.784, 0.809, 0.835, 0.862, // 56 57 58 59
	0.889, 0.916, 0.944, 0.972, // 60 61 62 63
	1.0                         // 64
};
