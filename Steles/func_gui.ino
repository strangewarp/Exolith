
// Update the GUI based on update-flags that have been set by the current tick's events
void updateGUI() {

	// Note: The second LED-row is the same in both RECORD and PLAY modes
	if (TO_UPDATE & 2) { // If the second row is slated for a GUI update...
		byte r2 = 1 << (7 - PAGE); // Get the page-location, translated to its LED-row value
		r2 |= ((CURTICK % 24) < 12) ? 16 : 0; // Metronome on or off, depending on time since last quarter-note
		for (byte i = 0; i < 8; i++) { // For every sustain-slot...
			if (SUSTAIN[i][1] == 255) { break; } // If the slot is empty, stop checking sustain-slots
			r2++; // Else, increase the sustain-value in this LED-row
		}
		lc.setRow(0, 1, r2); // Set the LED-row
	}

	if (RECORDMODE) { // If RECORD MODE is active...

		if (TO_UPDATE & 1) { // If the top row is slated for a GUI update...

			if (CTRL == 2) { // If BASE-NOTE pressed...
				lc.setRow(0, 0, BASENOTE); // Display BASENOTE value
			} else if (CTRL == 4) { // Else, if OCTAVE pressed...
				lc.setRow(0, 0, OCTAVE); // Display OCTAVE value
			} else if (CTRL == 8) { // If DURATION pressed...
				lc.setRow(0, 0, DURATION); // Display DURATION value
			} else if (CTRL == 6) { // Else, if VELOCITY pressed...
				lc.setRow(0, 0, VELO); // Display VELOCITY value
			} else if (CTRL == 10) { // Else, if HUMANIZE pressed...
				lc.setRow(0, 0, HUMANIZE); // Display HUMANIZE value
			} else if (CTRL == 12) { // If QUANTIZE pressed...
				lc.setRow(0, 0, QUANTIZE); // Display QUANTIZE value
			} else if (CTRL == 18) { // If CHANNEL pressed...
				lc.setRow(0, 0, CHANNEL); // Display CHANNEL value
			} else if (CTRL == 20) { // If SEQ-SIZE pressed...
				lc.setRow(0, 0, SEQ_SIZE[RECORDSEQ]); // Display current record-seq's SIZE value
			} else if (CTRL == 24) { // If BPM pressed...
				lc.setRow(0, 0, BPM); // Display BPM value
			} else if (CTRL == 22) { // If CLOCK-MODE pressed...
				lc.setRow(0, 0, CLOCKMASTER ? 255 : 0); // Display MIDI CLOCK MASTER/FOLLOWER status
			} else if (CTRL == 26) { // If CHAN-LISTEN pressed...
				lc.setRow(0, 0, LISTEN); // Display the CHAN-LISTEN value
			} else { // If no CTRL buttons are held, or an unknown or irrelevant combination of CTRL buttons are held...
				lc.setRow(0, 0, 128 >> byte(floor(CURTICK / 96))); // Display the global-gate position
			}

		}

		if (TO_UPDATE & 252) { // If any of the bottom six rows are slated for a GUI update...

			word mask = 65280 >> MARQUEE; // Get the mask-position for currently-visible scrolled messages
			byte minv = 8 - MARQUEE; // Get the amount by which the masked messages have to be shifted rightward

			for (byte i = 0; i < 6; i++) { // For every potential row-to-update...

				// If the row is not slated for update, continue to the next row
				if (!(TO_UPDATE & (4 << i))) { continue; }

				// Holds the LED-row's contents, which will be assembled based on which commands are held
				byte contents = 0;

				if (CTRL <= 1) { // If NOTE-RECORDING is being toggled, or no CTRL button is held...
					if (RECORDNOTES) { // If RECORDING, then...
						contents = GLYPH_RECORDING[i]; // Slate the RECORDING-glyph for display
					} else { // Else, if not RECORDING...
						contents = 128 >> ((marq + i) % 4); // Morph into something cool
					}
				} else if (CTRL == 2) { // If BASE-NOTE command is held...
					contents = (SCROLL_BASENOTE[i] & mask) >> minv; // Slate the BASENOTE-marquee for display
				} else if (CTRL == 4) { // If OCTAVE command is held...
					contents = (SCROLL_OCTAVE[i] & mask) >> minv; // Slate the OCTAVE-marquee for display
				} else if (CTRL == 8) { // If DURATION command is held...
					contents = (SCROLL_DURATION[i] & mask) >> minv; // Slate the DURATION-marquee for display
				} else if (CTRL == 16) { // If SWITCH-SEQ command is held...
					contents = GLYPH_RSWITCH[i] | (15 * (marq % 2)); // Slate the SWITCH-SEQ-glyph for display
				} else if (CTRL == 32) { // If ERASE WHILE HELD command is held...
					contents = GLYPH_ERASE[i]; // Slate the ERASE-glyph for display
				} else if (CTRL == 6) { // If VELOCITY command is held...
					contents = (SCROLL_VELO[i] & mask) >> minv; // Slate the VELOCITY-marquee for display
				} else if (CTRL == 10) { // If HUMANIZE command is held...
					contents = (SCROLL_HUMANIZE[i] & mask) >> minv; // Slate the HUMANIZE-marquee for display
				} else if (CTRL == 12) { // If QUANTIZE command is held...
					contents = (SCROLL_QUANTIZE[i] & mask) >> minv; // Slate the QUANTIZE-marquee for display
				} else if (CTRL == 18) { // If CHANNEL command is held...
					contents = (SCROLL_CHAN[i] & mask) >> minv; // Slate the CHAN-marquee for display
				} else if (CTRL == 20) { // If SEQ-SIZE command is held...
					contents = (SCROLL_SIZE[i] & mask) >> minv; // Slate the SEQ-SIZE-marquee for display
				} else if (CTRL == 24) { // If BPM command is held...
					contents = (SCROLL_BPM[i] & mask) >> minv; // Slate the BPM-marquee for display
				} else if (CTRL == 14) { // If SAVE command is held...
					contents = GLYPH_SAVE[i]; // Slate the SAVE-glyph for display
				} else if (CTRL == 22) { // If CLOCK-MODE command is held...
					contents = (SCROLL_CLOCKMODE[i] & mask) >> minv; // Slate the CLOCK-MODE-marquee for display
				} else if (CTRL == 26) { // If CHAN-LISTEN command is held...
					contents = (SCROLL_LISTEN[i] & mask) >> minv; // Slate the CHAN-LISTEN-marquee for display
				} else if (CTRL == 28) { // If LOAD command is held...
					contents = GLYPH_LOAD[i]; // Slate the LOAD-glyph for display
				}

				lc.setRow(0, i + 2, contents); // Set the LED-row based on the current display-contents

			}

		}

	} else { // Else, if PLAY-mode is active...

		if (TO_UPDATE & 1) { // If the top row is slated for update...
			lc.setRow(0, 0, 128 >> byte(floor(CURTICK / 96))); // Display the global-gate position
		}

		for (byte i = 0; i < 6; i++) { // For the six bottom-most rows...
			if (!(TO_UPDATE & (4 << i))) { continue; } // If the row is not slated for an update, skip to checking the next row
			byte cdata = (CTRL & (1 << i)) ? 240 : 0; // Get the row's corresponding CTRL-button's status
			for (byte j = 0; j < 4; j++) { // For each column in this row of the sequence-block...
				cdata |= (8 >> j) * (SEQ_POS[(PAGE * 24) + (i * 4) + j] >> 15); // Figure out whether this sequence is active
			}
			lc.setRow(0, i + 2, cdata); // Set the LEDs to reflect this row of accumulated sequence on/off values
		}

	}

	TO_UPDATE = 0; // Unset the GUI-row-update flags

}
