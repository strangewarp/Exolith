
Tegne TODO

Software:

	. change second LED-row to display the current number of active sustains
		-- done afaict, but still needs additional fixes to underlying sustain & note-press systems before being testable
	. display both pages' sequence-activity simultaneously
		-- done afaict, but still needs fixes to the sequencing system before being testable
	. timing system / global cue system look broken? fix them
		-- seem fixed now, though may require tweaking as the sequencing system comes online
	. test note-recording itself
		. manually wipe previous savefile from SD-card before testing anything
			-- ok
		. the file mechanism isn't making savefiles, debug it
			-- fixed
		. check that the sequence whose button is hit at the completion of the TOGGLE RECORD-MODE command is the sequence that ends up being edited
			-- yes. but:
			. only currently-playing seqs should be allowed to be edited (requires an if-then check and a cue-clear on mode-toggle)
				-- done
		. fix filesystem bugs:
			. header bytes look corrupted? figure out why
				. something is writing the project's github description-blurb into its savefile header. this shouldn't even be possible. what the hell
					-- fixed: it was junk-data from when the README was accidentally placed onto the SD-card: createContiguous() didn't overwrite it
					. figure out how to make the filesystem resilient to this style of junk-data residue
						. preload the card with blank savefiles?
							. this would require an additional step in the hardware-manufacturing process to do this to every card in bulk
								. research this
									-- ok. looks like various services are willing to do this in bulk, for the manufacturing process. but:
									. is there a way to ensure the files are totally contiguous, when placed on the card in the first place?
										. write a createContiguous utility script to block out the file locations, and run it
											-- done
											-- also, figured out that the SD Association's formatting utility removes the junk-data! therefore:
											. write some routines to automatically create contiguous files on a given SD-card's first use by Tegne
												-- done
		. run a simple RECORD-session. now look at savefile. have things been recorded?
			-- yes but in the wrong way
			. figure out why notes for seq 0 are being placed at location 0x28031 (163889)
				-- ok
			. figure out why notes are appearing in incorrect clusters, with some entries missing
				-- tentatively fixed: it was wrong scaling between whole-notes (seq-size measurement), 16th-notes (max granularity), and data positions (8 bytes per 16th-note per seq) in recordToSeq()
		. test behavior of VELOCITY and HUMANIZE
		. test behavior of BASENOTE and OCTAVE
		. update behavior of DURATION in both its bounded user-var-setting and its RECORD MODE behavior - was it updated from ticks to 16ths?
	. test basic sequencing
		. regular notes
		. intervals
		. duophony
		. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
	. show currently-active section of recording-seq in RECORD MODE, in addition to global cue-point?
	. test sustain system
		. test sustain-display row
			. note: seems to be a bug in here, where sustains are either displayed wrongly or linger incorrectly; spotted during previous tasks
	. remove all outdated updates for second GUI-row in PAGE and CTRL-BUTTON functions
	. test all cue-commands
		. OFF
		. CUE
		. SLICE
		. CUE (with SLICE insertion)
		. CUE OFF
		. PAGE OFF
		. SCATTER (amount)
		. SCATTER UNSET
		. PAGE SCATTER UNSET
		. GLOBAL PLAY/STOP
	. display SCATTER status only when a SCATTER command is held
	. reduce sequence-size to 32 whole-notes, to cut down on potential read-lag?
	. test "toggle to next/prev sequence" in RECORD mode
	. test INTERVAL commands
		. recording them to seq
		. playing them from seq
	. add a "totally empty out the sequence's contents" command to RECORD-MODE
	. test MIDI CC commands
	. test file-load
	. test MIDI-IN (notes)
		. uncomment parseRawMidi() in void loop()
	. test MIDI-IN (clock)
		. add a "DO NOT SEND CLOCK SIGNALS" user-flag to the CLOCK MASTER/FOLLOW mechanism
	. double-check all functionality for sequences on the second-page
	. edge-case testing:
		. does RECORD MODE work right:
			. when the sequence is loaded with SCATTERs and CUEs?
			. in MIDI FOLLOW mode?
			. for sequences with a weird tempo/slice offset from the global cue?
	. change GUI to work with 32x dual-color LEDs:
		. glyphs in RECORD-mode must alternate between their two characters, based on global timing
		. SEQ and SCATTER values should only be shown for the currently active page
	. replace bloated LedControl with optimized custom functions
		. replace LedControl with LedControl_HW_SPI???
			. either a simplified version of LedControl_HW_SPI, or a simplified version of LedControl, but either way, it needs to directly address port-registers
	. survey all TO_UPDATE calls, for superfluous flags
	. add PROGRAM CHANGE functionality (in addition to CONTROL CHANGE)
		. make sure this has its virtual PC-bit lopped off by INTERVAL-commands in RECORD mode, just like virtual CC-bits
	. add GUI prompts for:
		. current RECORDSEQ value (RECORD MODE)
	. check whether sequences can actually function with non-multiple-of-2 lengths
	. add SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?
	. add a command to shift the position of the global cue-point?
	. double-check that there are no remaining "todo" or "test" comments in the codebase
	. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
	. test overloading the 8-events-per-tick system
	. test overloading the SUSTAIN system
	. test overloading the MIDI-IN system
	. update "VERSION_TEXT" to "1"
	. soak-test the physical prototype

Hardware:

	. test breadboarded prototype with shared-SPI-line layout (and two digital SPI-select pins), for LedControl_HW_SPI lag-reduction
		. if this works:
			. reroute PCB prototype to reflect the changes
			. update both KiCad and firmware to reflect the changes
			. two pins will be freed up by this, so reassign them:
				. pin 1: digital MIDI-IN indicator (NOTEs only)
				. pin 2: digital MIDI-OUT indicator (NOTEs only)
			. if 2 pins are indeed freed-up for MIDI I/O indicators, then only two slots of the 74HC14N Schmitt-trigger will end up being used, so look for a smaller 2-slot alternative to it
			. put the results of this line of inquiry into the "update KiCad file" task
	. test higher resistor values for POWER-LED to get a matching brightness level
	. note: this task may no longer be necessary, but keeping it until I'm sure:
		. test MIDI-IO LED circuit with 0.1uF & 1uF capacitors
			. or with 1k/10k resistor from cap+ to GND
			. if it's as bright as the current kind, then: change KiCad schematics & PCBs & Mouser order to reflect this
	. change design so "cap" pieces of the enclosure are on the sides, not top and bottom?
		. would have to figure out a "bracket" that can fit on the M-screws, to hold on the side-panels with another M-screw per bracket
		. upside: this would result in a screw-free faceplate, and automatically give clearance for the screws on the underside & protect the LEDs up top
		. upside: depending on thickness, the brackets would eliminate any need to use washers to get enough clearance for the MIDI ports' height
		. upside: would allow a "split-level" faceplate, a few mm higher for buttons in front, and a few mm lower for 3mm LEDs in back
		. downside: if AVR-ISP port is internal, this makes it more annoying to upgrade firmware (removing entire enclosure vs. removing faceplate & one sideplate)
	. update KiCad file:
		. bottom-board:
			. reduce thermal-plate size to accomodate new smaller heatsinks
			. use regular-sized capacitors, in a laying-down position, because people replacing capacitors wouldn't have special tiny ones sitting around
			. socket all capacitors, to futureproof the capacitor-replacement process
			. update R-SET resistor's value based on the new diffused LEDs
			. socket the R-SET resistor, to futureproof against any possible changes to the top-board LEDs
			. move POWER-LED to center of bottom-board, and use a high-brightness white LED with a very wide visibility-cone
		. top-board:
			. use 3mm LEDs instead of 5mm LEDs
				. look for a variety that has a high luminosity but relatively low price
				. make sure the LED-variant has enough physical height to poke through the enclosure
				. check whether a different RSET resistor value is necessary to match the LEDs' voltage/current requirements
				. keep spacing between the edges of LED bulbs at ~3mm, to keep the laser-cut faceplate from being fragile
			. reduce button-spacing by 1mm, both vertical and horizontal
		. both boards:
			. double-check that the stacking-headers on the bottom-board and top-board share their corresponding positions
			. move shrouded AVR-ISP jack to edge of bottom-board, to prevent any need to muck around with safety-caps
				. make a cut through edge of top-board, so AVR-ISP header can be accessed more easily when faceplate is removed
			. reduce boards' size, to fit the results of various changes
			. make sure there's still enough room for all M3 screws & standoffs
				. move POWER port to right side?
			. change all edge-cuts to reflect the rearrangement of ports
			. double-check that ports aren't competing for space with standoffs
	. make sure to use B3F-5050 buttons in finished unit; these have a longer life than B3F-4050 buttons
	. redo all Inkscape files for enclosure, making sure to retake all measurements & repeat the KiCad-to-Inkscape vector paste process
	. look into rubber adhesive nubs, for protecting the screws on the underside, & preventing any scratching/wear of surfaces
	. make sure that the SD-cards are capable of high-speed transfer, and are shipped in a state identical to what results from the SD Association formatter utility

