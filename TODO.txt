
Tine TODO

Software:

	. the RECORDSEQ, and possibly other seqs, seem to be lagging exactly one 16th-note behind the global cue-point
	. this implies that there is a deep off-by-one error somewhere in the sequencing/cue system.
	. find it and fix it
		-- might have been primeRecSeq() wrapping things around to a tick that had already elapsed
		. test it
			-- seems fixed

	. upload new firmware, go into RECORD MODE for seq 0, change its size, power-cycle, and see whether its autoplay-bug is fixed
		-- seems fixed

	. slow the tempo way down, and check whether the 16th-note offset bug occurs in PLAY MODE as well
		-- 
		. also verify that the notes are at the correct positions in the savefile, to rule out e.g. QUANTIZE bugs
			-- 

	. re-test everything
		. regular notes: recording & playback
		. note-erasing in RECORD-MODE
		. BASENOTE and OCTAVE
		. intervals
			. recording them to seq
			. playing them from seq
		. SHIFT POSITION
		. COPY/PASTE:
			. straightforward standard usge
			. with COPY size too long for PASTE size (should be discarded)
			. with COPY size too short for PASTE size (should repeat until the end of the PASTE area)
			. with COPY in another sequence than PASTE
		. duophony
		. various QUANTIZE settings
		. REPEAT
		. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
		. test SEQ-SIZE behavior
			. does a SEQ-SIZE of "0" correspond to 1 beat?
		. test CC commands
		. test file-load

	. re-test all cue-commands
		. OFF
		. CUE
		. SLICE
		. CUE (with SLICE insertion)
		. CUE OFF
		. PAGE OFF
		. SCATTER (amount)
		. SCATTER UNSET
		. PAGE SCATTER UNSET

	. test gesture system
		. test LOAD-MODE TOGGLE
		. test GLOBAL PLAY/STOP TOGGLE

	. update gui-key.txt
		. include button and LED spec for LOADMODE

	. convert all multi-byte Serial.write() commands into batch Serial.writes with a buffer-array of bytes, to totally rule out the possibility of serial lag

	. fill 12 sequences with notes, and check whether lag occurs when connected to a hardware synthesizer

	. need visible GUI element for which page is active, now that both are visible simultaneously
		. should blink between all-LEDs-on and regular-LEDs-on when any PAGE command is held, highlighting the active page
		. should blink one final time on the new page, after the page is selected, using a timer to control how long the ON-block should be OR'ed to regular LEDs

	. when the OFF button is used to wipe the cues from a cued seq, does that cued seq refrain from any activity correctly?
		. if a new cue is set for the same seq, as the seq's first action after such a situation, then does the cue act as expected?

	. does BPM change the savefile correctly?
		. is it loaded in correctly, on startup, after being changed by the user?

	. add PROGRAM CHANGE functionality (in addition to CONTROL CHANGE)
		. make sure this has its virtual PC-bit lopped off by INTERVAL-commands in RECORD mode, just like virtual CC-bits
		. make sure any button-press global-var changes to the CHAN and CC commands don't interfere with this
		. enabling PC should set the CC bit to 0, and enabling CC should set the PC bit to 0

	. when two note-buttons are simultaneously held during ARMED RECORDING, are they recorded simultaneously?
		. what if they're INTERVALS?
		. what if more than two are held?
		. what if they're CONTROL-CHANGES?
			. two held?
			. more than two?

	. soak-test the sequencer to test whether ABSOLUTETIME wrap-arounds work correctly (these should occur every hour or so)

	. when SCATTER, SCATTER-UNSET, PAGE-SCATTER, or PAGE-SCATTER-UNSET is held, the GUI should show only those sequences that have SCATTER states enabled

	. do very slow BPMs have the expected tick-length?
	. test whether very fast BPMs have any lag

	. if lag-reduction is necessary...
		. try moving the MAX7219 onto the SPI pins and using LedControl_HW_SPI immediately?
		. make sequences monophonic?
		. limit maximum BPM to 160?
		. change max note-granularity to 8th-notes?
		. remove MIDI CLOCK?
		. remove MIDI IN?
		. remove INTERVAL system?
		. remove or greatly simplify SCATTER system?

	. test "toggle to next/prev sequence" in RECORD mode

	. change func_gui.ino:
	. add GUI prompt for current RECORDSEQ value? (RECORD MODE)
	. cue a BLINK whenever the RECORDSEQ reaches its 0th position

	. display SCATTER status only when a SCATTER chord is held

	. reduce max sequence-size to 32 whole-notes, to cut down on potential read-lag?

	. test MIDI-IN (notes)
	. test MIDI-IN (clock)
		. add a "DO NOT SEND CLOCK SIGNALS" user-flag to the CLOCK MASTER/FOLLOW mechanism

	. replace bloated LedControl with optimized custom functions
		. replace LedControl with LedControl_HW_SPI???
			. either a simplified version of LedControl_HW_SPI, or a simplified version of LedControl, but either way, it needs to directly address port-registers

	. double-check all functionality for sequences on the second-page

	. edge-case testing:
		. does RECORD MODE work right:
			. when the sequence is loaded with SCATTERs and CUEs?
			. in MIDI FOLLOW mode?
			. for sequences with a weird tempo/slice offset from the global cue?

	. survey all TO_UPDATE calls, for superfluous flags

	. check whether sequences can actually function with non-multiple-of-2 lengths

	. add SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?

	. add a command to shift the position of the global cue-point?

	. add a command to change the global cue-point's granularity? (e.g. being 3 beats, or 7 beats, instead of 8 beats, and ignoring the extra LEDs)

	. add a single global "stats" file, to save and store global vars? (duration, basenote, etc)

	. re-test problem areas:
		. GLOBAL PLAY/STOP
		. MIDI-IN
		. GLOBAL PLAY/STOP under conditions of complex MIDI-IN

	. double-check that there are no remaining "todo" or "test" comments in the codebase
	. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
	. double-check that everything compiles correctly in the latest version of Arduino
	. test overloading the 8-events-per-tick system
	. test overloading the SUSTAIN system with simultaneous sequencing and notes-from-RECORD-MODE
	. test overloading the MIDI-IN system
	. update "VERSION_TEXT" to "1"
	. soak-test the physical prototype

Hardware:

	. test breadboarded prototype with shared-SPI-line layout (and two digital SPI-select pins), for LedControl_HW_SPI lag-reduction
		. remember, when rebuilding breadboard, to follow this error-prevention process:
			. print out schematics for reference
			. check off schematic elements with a pencil (both components and wires) as they are added
		. if this doesn't work:
			. rewrite LedControl to directly address port-registers, thereby eliminating a lot of lag-time
		. if this works:
			. rewrite LedControl_HW_SPI to directly address port-registers, thereby eliminating a lot of lag-time and freeing up two pins
			. update both KiCad and firmware to reflect the changes
			. two pins will be freed up by this, so reassign them:
				. pin 1: digital MIDI-IN indicator (NOTEs only)
				. pin 2: digital MIDI-OUT indicator (NOTEs only)
			. if 74HC14N ends up with free slots: add another buffering stage to the OUT line, and make the THRU port into a switchable THRU/OUT2 port
		. put the results of this line of inquiry into the "update KiCad file" task

	. double-check that the indicators have protection-diodes and protection-resistors on them
		. protection-resistors in front of each first transistor's base terminal
		. protection-diodes between the MIDI data-lines and the first protection-resistors

	. device could have 3 MIDI-OUT ports through various means:
		. removing the analog MIDI I/O indicators, and using their 74HC14N slots for chained buffering
		. adding a second 74HC14N chip, for chained buffering

	. note: this task may no longer be necessary, but keeping it until I'm sure:
		. test MIDI-IO LED circuit with 0.1uF & 1uF capacitors
			. or with 1k/10k resistor from cap+ to GND
			. if it's as bright as the current kind, then: change KiCad schematics & PCBs & Mouser order to reflect this

	. if still using current standoff lengths, then MIDI ports will require another mm of vertical space
		. therefore: put 1mm-thick spacers on every standoff and compensate for this in all side-panel sizes accordingly

	. update KiCad file:
		. bottom-board:
			. reduce board-size to use only the two frontmost pairs of screws?
				. would need to either perfectly compensate for size discrepancies in the backmost standoffs,
					or have two tiny squares of "dummy board" between the backmost standoffs,
					to keep the vertical kerf in check
			. reduce thermal-plate size to accomodate new smaller heatsinks
			. use regular-sized capacitors, in a laying-down position, because people replacing capacitors wouldn't have special tiny ones sitting around
			. socket all capacitors, to futureproof the capacitor-replacement process
			. move shrouded AVR-ISP jack to front-left edge of bottom-board, to prevent any need to muck around with safety-caps
			. update R-SET resistor's value based on the new diffused LEDs
			. socket the R-SET resistor, to futureproof against any possible changes to the top-board LEDs
			. move POWER-LED to center of bottom-board, and use a high-brightness white LED with a very wide visibility-cone
		. top-board:
			. remove AVR-ISP jack from top-board
		. both boards:
			. double-check that the stacking-headers on the bottom-board and top-board share their corresponding positions
			. change standoff hole-sizes to M3, plus extra kerf to compensate for standoff screws always being slightly over-size due to their threading
				. make sure there's still enough room for all M3 screws & standoffs
			. change all stacking headers to occupy a 2x20 horizontal row between the buttons and LEDs, to make the assembly process less fragile
			. reduce boards' size, to fit the results of various changes
			. change all edge-cuts to reflect the rearrangement of ports/standoffs, if applicable
			. double-check that ports aren't competing for space with standoffs

	. buy grounding-bracelets to use while soldering beta prototypes, and while assembling finished units

	. use different button-cap color for control-row?

	. make sure to use B3F-5050 buttons in finished unit; these have a longer life than B3F-4050 buttons

	. redo all Inkscape files for enclosure, making sure to retake all measurements & repeat the KiCad-to-Inkscape vector paste process

	. look into rubber adhesive nubs, for protecting the screws on the underside, & preventing any scratching/wear of surfaces

	. make sure that the SD-cards are capable of high-speed transfer, and are shipped in a state identical to what results from the SD Association formatter utility

