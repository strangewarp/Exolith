
Tine TODO

Software:

	Double-back and check later:

		. display both pages' sequence-activity simultaneously
			-- done afaict, but still needs fixes to the sequencing system before being testable

		. timing system / global cue system look broken? fix them
			-- seem fixed now, though may require tweaking as the sequencing system comes online

	Current tasks:

		. test that sequencing still works after that refactor
			-- nope
			. figure out why it's broken
				-- (refer to next item in TODO list; convergent issues)
		. ERASE WHILE HELD should only erase notes if they match the global CHAN variable
			-- done. also refactored surrounding routines for efficiency
			. test it
				-- nope! notes only play when ERASE WHILE HELD is held?
				. figure out how to fix this
					-- think it was a logic-flow bug in getTickNotes().
					. test it
						-- 
					. re-test ERASE WHILE HELD
						-- 

		. add a STEP BY STEP RECORD mode
			. combine this with realtime editing
			. notes should only be recorded in realtime from MIDI-IN; keypad is slightly too unreliable
			. play sequence in realtime in the background, while doing step-editing in the foreground
			. need a global var for current step-edit point: STEPPOS
				. needs to be reset at the following times:
					. whenever SEQ-SIZE is changed
					. whenever RECORD-MODE is toggled into from PLAY MODE or LOAD MODE
			. QUANTIZE must be changed to represent the distance to skip ahead after recording a note (0-16)
				. change QUANTIZE's max value to 16
				. when RECORDING is ARMED, and a note is pressed, record that note, and then skip ahead by a QUANTIZE-controlled amount of space
			. in STEP RECORDING mode, when ARM RECORDING is held, the bottom 5 rows of buttons should become MOVE commands:
				. row 5: move by one 16th note
				. row 4: move by one quarter note
				. row 3: move by one whole note
				. row 2: move by one slice
				. row 1: erase tick, erase quarter-beat, erase half-beat, erase beat (absolute positions, not relative position)
				. row 0: disarm ARM RECORDING like normal
			. ui:
				. leds:
					. top row: current position within the sequence (in realtime)
					. second row: current beat (step position)
					. third row: current 16th-note within the beat (step position)
					. fourth row: chanvelo composite, note slot 1
					. fifth row: pitch, note slot 1
					. sixth row: chanvelo composite, note slot 2
					. seventh row: pitch, note slot 2
					. eighth row: displays whether the first or second note is a special-command

		. fill 12 sequences with notes, and check whether lag occurs when connected to a hardware synthesizer

		. need visible GUI element for which page is active, now that both are visible simultaneously

		. note-insertion has bad timing sometimes?

		. test gesture system
			. test LOAD-MODE TOGGLE
			. test GLOBAL PLAY/STOP TOGGLE

		. test basic sequencing
			. regular notes: recording & playback
			. note-erasing in RECORD-MODE
			. BASENOTE and OCTAVE
			. intervals
				. recording them to seq
				. playing them from seq
			. duophony
			. various QUANTIZE settings
			. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
			. test SEQ-SIZE behavior
				. does a SEQ-SIZE of "0" correspond to 1 beat?
			. test CC commands
			. test file-load

		. if lag-reduction is necessary...
			. try moving the MAX7219 onto the SPI pins and using LedControl_HW_SPI immediately?
			. make sequences monophonic?
			. limit maximum BPM to 160?
			. change max note-granularity to 8th-notes?
			. remove MIDI CLOCK?
			. remove MIDI IN?
			. remove INTERVAL system?
			. remove or greatly simplify SCATTER system?

		. test "toggle to next/prev sequence" in RECORD mode

		. change func_gui.ino:
			. add GUI prompt for current RECORDSEQ value? (RECORD MODE)
			. show currently-active section of the recording-seq in RECORD MODE, in addition to the global cue-point
			. change func_sequencing.ino to toggle a GUI update whenever the recording-seq in RECORD MODE reaches a new slice of itself
			. remove all outdated updates for second GUI-row in PAGE and CTRL-BUTTON functions

		. convert all multi-byte Serial.write() commands into batch Serial.writes with a buffer-array of bytes, to totally rule out the possibility of serial lag

		. test all cue-commands
			. OFF
			. CUE
			. SLICE
			. CUE (with SLICE insertion)
			. CUE OFF
			. PAGE OFF
			. SCATTER (amount)
			. SCATTER UNSET
			. PAGE SCATTER UNSET

		. display SCATTER status only when a SCATTER chord is held

		. reduce max sequence-size to 32 whole-notes, to cut down on potential read-lag?

		. add a "totally empty out the sequence's contents" command to RECORD-MODE?

		. test MIDI-IN (notes)
		. test MIDI-IN (clock)
			. add a "DO NOT SEND CLOCK SIGNALS" user-flag to the CLOCK MASTER/FOLLOW mechanism

		. replace bloated LedControl with optimized custom functions
			. replace LedControl with LedControl_HW_SPI???
				. either a simplified version of LedControl_HW_SPI, or a simplified version of LedControl, but either way, it needs to directly address port-registers

		. double-check all functionality for sequences on the second-page

		. edge-case testing:
			. does RECORD MODE work right:
				. when the sequence is loaded with SCATTERs and CUEs?
				. in MIDI FOLLOW mode?
				. for sequences with a weird tempo/slice offset from the global cue?

		. survey all TO_UPDATE calls, for superfluous flags

		. add PROGRAM CHANGE functionality (in addition to CONTROL CHANGE)
			. make sure this has its virtual PC-bit lopped off by INTERVAL-commands in RECORD mode, just like virtual CC-bits
			. make sure any button-press global-var changes to the CHAN and CC commands don't interfere with this
				. this will definitely require a change to the "If the CHAN button is held..." lines
			. update "reserved for PROGRAM-CHANGE" line in button-key.txt

		. check whether sequences can actually function with non-multiple-of-2 lengths

		. add SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?

		. add a command to shift the position of the global cue-point?

		. add a command to change the global cue-point's granularity? (e.g. being 3 beats, or 7 beats, instead of 8 beats, and ignoring the extra LEDs)

		. add a single global "stats" file, to save and store global vars? (duration, basenote, etc)

		. re-test problem areas:
			. GLOBAL PLAY/STOP
			. MIDI-IN
			. GLOBAL PLAY/STOP under conditions of complex MIDI-IN

		. double-check that there are no remaining "todo" or "test" comments in the codebase
		. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
		. double-check that everything compiles correctly in the latest version of Arduino
		. test overloading the 8-events-per-tick system
		. test overloading the SUSTAIN system with simultaneous sequencing and notes-from-RECORD-MODE
		. test overloading the MIDI-IN system
		. update "VERSION_TEXT" to "1"
		. soak-test the physical prototype

Hardware:

	. test breadboarded prototype with shared-SPI-line layout (and two digital SPI-select pins), for LedControl_HW_SPI lag-reduction
		. remember, when rebuilding breadboard, to follow this error-prevention process:
			. print out schematics for reference
			. check off schematic elements with a pencil (both components and wires) as they are added
		. if this doesn't work:
			. rewrite LedControl to directly address port-registers, thereby eliminating a lot of lag-time
		. if this works:
			. rewrite LedControl_HW_SPI to directly address port-registers, thereby eliminating a lot of lag-time and freeing up two pins
			. update both KiCad and firmware to reflect the changes
			. two pins will be freed up by this, so reassign them:
				. pin 1: digital MIDI-IN indicator (NOTEs only)
				. pin 2: digital MIDI-OUT indicator (NOTEs only)
			. if 74HC14N ends up with free slots: add another buffering stage to the OUT line, and make the THRU port into a switchable THRU/OUT2 port
		. put the results of this line of inquiry into the "update KiCad file" task

	. double-check that the indicators have protection-diodes and protection-resistors on them
		. protection-resistors in front of each first transistor's base terminal
		. protection-diodes between the MIDI data-lines and the first protection-resistors

	. note: this task may no longer be necessary, but keeping it until I'm sure:
		. test MIDI-IO LED circuit with 0.1uF & 1uF capacitors
			. or with 1k/10k resistor from cap+ to GND
			. if it's as bright as the current kind, then: change KiCad schematics & PCBs & Mouser order to reflect this

	. if still using current standoff lengths, then MIDI ports will require another mm of vertical space
		. therefore: put 1mm-thick spacers on every standoff and compensate for this in all side-panel sizes accordingly

	. update KiCad file:
		. bottom-board:
			. reduce board-size to use only the two frontmost pairs of screws?
				. would need to either perfectly compensate for size discrepancies in the backmost standoffs,
					or have two tiny squares of "dummy board" between the backmost standoffs,
					to keep the vertical kerf in check
			. reduce thermal-plate size to accomodate new smaller heatsinks
			. use regular-sized capacitors, in a laying-down position, because people replacing capacitors wouldn't have special tiny ones sitting around
			. socket all capacitors, to futureproof the capacitor-replacement process
			. move shrouded AVR-ISP jack to front-left edge of bottom-board, to prevent any need to muck around with safety-caps
			. update R-SET resistor's value based on the new diffused LEDs
			. socket the R-SET resistor, to futureproof against any possible changes to the top-board LEDs
			. move POWER-LED to center of bottom-board, and use a high-brightness white LED with a very wide visibility-cone
		. top-board:
			. remove AVR-ISP jack from top-board
		. both boards:
			. double-check that the stacking-headers on the bottom-board and top-board share their corresponding positions
			. change standoff hole-sizes to M3, plus extra kerf to compensate for standoff screws always being slightly over-size due to their threading
				. make sure there's still enough room for all M3 screws & standoffs
			. change all stacking headers to occupy a 2x20 horizontal row between the buttons and LEDs, to make the assembly process less fragile
			. reduce boards' size, to fit the results of various changes
			. change all edge-cuts to reflect the rearrangement of ports/standoffs, if applicable
			. double-check that ports aren't competing for space with standoffs

	. buy grounding-bracelets to use while soldering beta prototypes, and while assembling finished units

	. use different button-cap color for control-row?

	. make sure to use B3F-5050 buttons in finished unit; these have a longer life than B3F-4050 buttons

	. redo all Inkscape files for enclosure, making sure to retake all measurements & repeat the KiCad-to-Inkscape vector paste process

	. look into rubber adhesive nubs, for protecting the screws on the underside, & preventing any scratching/wear of surfaces

	. make sure that the SD-cards are capable of high-speed transfer, and are shipped in a state identical to what results from the SD Association formatter utility

