

Tine TODO

Software:

	!!! DO NOT CHANGE list:
		-- RECORD TOGGLE's glyph and ERASE-NOTES/ERASE-INVERT-NOTES' chords need to conflict,
		-- so that the file.sync() on ERASE-key-ups doesn't get skipped when toggling
			-- if any ERASE-key-chord is changed, then the file.sync() call in unassignKey() must also be changed

	. prove I'm not a dipshit: actually finish the project

	-- changed the "A"-based note-glyphs, because recognizability feels more important than uniqueness

	. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
		-- 
	
	. test manually-recorded MIDI-OFF (cmd-byte 128) commands:
		. keystrokes in RECORD-MODE
			-- seem to work
		. recorded as events in the sequence
			-- seems okay
	. test CC/PC/other advanced MIDI commands:
		. with REPEAT-SWEEP active
			-- 
		. with arpeggiation
			--
		. recorded as events in the sequence
			-- 

	. change the activity-persist-on-LOAD system:
		-- am doing
		. remove the mechanism that keeps the same seqs playing when a new song is loaded
			-- done
		. add an ACTIVE ON LOAD command, which will trigger whether a seq becomes active on song-load
			-- am doing
			. store its activity in each seq's STATS byte in the file-header
				-- ok
				. change the updateSeqHeader() function, so that it saves a composite of the seq's size and its activity-on-load to the savefile
					-- done
			. put a RECORD-MODE keychord for ACTIVE ON LOAD into button-key.txt
				-- done
			. put its CmdFunc name in the CmdFunc list, adjusting other CmdFuncs around it
				-- done
			. write its actual CmdFunc in func_cmd.ino
				-- done
			. make a GUI-GLYPH for ACTIVE ON LOAD
				-- done
      . update GUI functions to display ACTIVE ON LOAD correctly, and make sure its CmdFunc has a TO_UPDATE call
				-- done
			. add the activate-seqs-on-load mechanism to the FILE LOAD function
				-- done
				. remember to refrain from resetting GLOBAL CUE, and to wrap seq activity based on GLOBAL CUE position
					-- ok
		. double-check that all calls to the STATS variable correctly account for SEQ ON/OFF on bit 7 and SEQ ACTIVE ON LOAD on bit 6
			-- 
		. test ACTIVE ON LOAD functionality
			-- 

  . each savefile should have a block of SEND ON LOAD and SEND ON EXIT commands - MIDI commands in the header that are all played on file-load and on file-exit
		-- am doing
		. change data-format.txt and define-statements in Steles.ino
			-- done
		. change file-loading system, to send all PLAY ON LOAD commands when the file is loaded
			-- done
		. add commands for AUTOCMD-INSERT, AUTOCMD-DELETE, and AUTOCMD-CURSOR
			-- am doing
			. put their RECORD-MODE keychords into button-key.txt
				-- done
			. add their CmdFunc names to the CmdFunc list, adjusting other CmdFuncs around them
				-- done
      . make a special GUI mechanism for AUTOCMD-CURSOR:
        . it needs to show the current MIDI command in the current AUTOCMD slot, for either LOAD or EXIT (based on whether REPEAT is active)
          -- done
        . it also must show the current AUTOCURSOR position when held
          -- done
      . update all manual GUI-GLYPH calls in func_gui.ino: set them forward by 4x6 bytes each
        -- done
			. write their actual CmdFuncs in func_cmd.ino
				-- 
				. on AUTOCMD-INSERT and AUTOCMD-DELETE, insert the data directly into its corresponding header-slot in the savefile
					--
				. on AUTOCMD-INSERT, the corresponding message should immediately be sent to MIDI-OUT
					-- 
			. make GUI-GLYPHs for AUTOCMD-INSERT, AUTOCMD-DELETE, and AUTOCMD-CURSOR funcs
				-- done
			. update GUI functions to display all AUTOCMD-INSERT, AUTOCMD-DELETE, and AUTOCMD-CURSOR funcs correctly,
			.   and make sure their CmdFuncs all have TO_UPDATE calls
				-- 
		. note: REPEAT-toggle should have a dual purpose as a LOAD-EXIT toggle
			-- 
	. wipe SD-card again, since savefile format has been changed
		-- 
	. test AUTOCMD-INSERT, AUTOCMD-DELETE, and AUTOCMD-CURSOR
		-- 
	. test SEND ON LOAD
		-- 
	. test SEND ON EXIT
		-- 

	. when two notes on the same channel with the same pitch are in the SUSTAIN queue, the nested NOTE-OFF does not behave as expected with most synths.
	.   update: this was an older todo entry, so: check to definitively make sure that this is actually happening. (note-entry while a seq is playing, perhaps?)
		--
	. if so, then a change is necessary:
		. whenever a note is about to be added to the SUSTAIN queue, check whether that chan/pitch combo is in SUSTAIN already.
			-- 
		. if so: send a NOTE-OFF for that note, remove its SUSTAIN entry (and shift other entries accordingly), and then and only then insert the new SUSTAIN entry
			-- 

	. bug spotted: DUR-HUMANIZE causes hanging sustains sometimes? figure out how and why
		--

	. bug spotted: sometimes a note will be missing from a sequence, after recording the note and immediately returning to PLAY-MODE. figure out how to replicate bug
		-- 

	. add MIDI SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?

	. problem: erasing notes has annoying UX now.
		. well... maybe it doesn't. do more UX testing before performing this block of changes
			--
			. only apply the "erase on QUANTIZE-QRESET-OFFSET ticks" and "INVERSE ERASE" mechanisms when REPEAT is enabled.
			.   otherwise, ERASE should erase all CHAN-matching notes on each new tick as it's held, and INVERSE-ERASE should have no effect.
				--
				. update GUI checks for the INVERSE ERASE glyph
					--

	. test regular-ERASE
		-- seems to work
	. test REPEAT-ERASE
		-- seems to work
	. test both types of ERASE with strange QUANTIZE-QRESET-OFFSET settings
		--
	. test regular-ERASE-INVERSE
		-- seems to work
	. test ERASE-INVERSE with strange QUANTIZE-QRESET-OFFSET settings
		--

	. test long-sequence timed cues and beatslicing
		--

	. test REPEAT-SWEEP on:
		. recording regular MIDI commands
			--
		. recording special MIDI commands
			--
		. recording BPM commands
			--

	. re-test timing system for BPM accuracy, by connecting to a Pd testing apparatus
		--

	. re-test all tricky recording mechanisms
		. ERASE WHILE HELD on TRACK 2
		. CLEAR SEQ clears notes in the correct size-window?
		. CLEAR SEQ clears both tracks simultaneously?
		. SEQ POSITION
		. SWITCH RECORDSEQ

	. reassign the RECORD-MODE control-commands to make logical sense (draw a chart to help with this, if necessary)
		. change button-key.txt:
			. RECORD, REPEAT, and TRACK should be conceptually connected
			. CHAN and UPPER-CHAN should be conceptually connected
			. OCTAVE, VELOCITY, DURATION, HUMANIZE, and QUANTIZE should be conceptually connected
		. change KEYTAB array for this
		. change RECORD-MODE GUI routines for this

	. re-test all cue-commands
		. OFF
		. CUE
		. SLICE
		. CUE (with SLICE-offset insertion)
		. CUE OFF
		. PAGE OFF
		. SCATTER (amount)
		. SCATTER UNSET
		. PAGE SCATTER UNSET
		. double-pressed commands, of the same or different types, to check for unexpected behaviors

	. check that all possible edge-case sequences on all pages load correctly, when a new savefile is loaded

	. test MIDI-IN (notes)
		. are notes recorded correctly in RECORD-MODE?
		. are notes recorded only when RECORDNOTES is armed?
		. make sure that notes are not erroneously recorded when PLAY MODE or LOAD MODE is active
			. especially after toggling into LOAD MODE from RECORD MODE with RECORDNOTES armed

	. reinsert a simple MIDI-IN (clock) system?

	. take a survey of all commands in button-key.txt:
		. re-read each command's code, and check the circumstances under which each command works
		. write a tutorial blurb for each command, explaining its function
			. remember to say that ERASE-INVERSE-NOTES only works while both REPEAT and RECORDNOTES are armed

	. check whether sequences function correctly with non-multiple-of-2 lengths, under all RECORD MODE and PLAY MODE processes
	. check that, when a deeper savefile is loaded and is running many complex sequences, there's no extra lag for whatever reason
	. look at all note-recording routines again, to triple-check for any stupid mistakes that would lead to unnecessary wear
	. double-check that the BPM rate is actually accurate at various speeds
	. fill 12 sequences with notes, and check whether lag occurs when connected to a hardware synthesizer
	. does anything catastrophic happen when the SD-card is removed during regular operation? or in RECORD-MODE?

	==== SOFTWARE BETA THRESHOLD ====

	. when the OFF button is used to wipe the cues from a cued seq, does that cued seq refrain from any activity correctly?
		. if a new cue is set for the same seq, as the seq's first action after such a situation, then does the cue act as expected?

	. do very slow BPMs have the expected tick-length?
	. test whether very fast BPMs have any lag

	. double-check all functionality for sequences on the second-page

	. edge-case testing:
		. does RECORD MODE work right:
			. when the sequence is loaded with SCATTERs and CUEs?
			. in MIDI FOLLOW mode?
			. for sequences with a weird tempo/slice offset from the global cue?

	. survey all TO_UPDATE calls, for superfluous flags

	. double-check that there are no remaining "todo" or "test" comments in the codebase
	. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
	. double-check that everything compiles correctly in the latest version of Arduino
	. test overloading the 8-events-per-tick system
	. test overloading the SUSTAIN system with simultaneous sequencing and notes-from-RECORD-MODE
	. soak-test the physical prototype

	. add a note to tutorials on wear-leveling:
		. extreme repetitive use of note-insertion and CLEAR will lead to comparatively faster card degradation (~10 years, versus the card's natural material lifespan)

	. research how to back-up the contents of the SD-card in a manner that recombines the savefiles without losing their contiguous nature
		-- copy off the disk manually, and then transfer back onto the disk file-by-file using XVI32 to paste their contents into blank files
		-- copy en masse as a disk-image, and then reapply en masse with a disk-imager
		-- copy by simple drag-and-drop, though this might lead to non-contiguous files and cause lag problems?
		. research this third option more

Hardware:

	==== HARDWARE BETA THRESHOLD ATTAINED ====

	. slightly widen pin-holes for all buttons, right now they are too tight
		. NOTE: need to double-check whether I already did this and forgot

	. consider using 100uF capacitors in the 9v-5v regulator circuit anyway, just to be safe

	. make sure that you order the ATMEGA chips with the proper bootloader fuse config (along with the firmware), or else they will be 8 times too slow and incapable of sending MIDI
		. buy a test-batch that are preprogrammed in such a way, and slot one into a Tine beta unit for testing

	. stress-test both MIDI-INDICATOR LEDs simultaneously, with heavy simultaneous IN/OUT signals (with OUT plugged into two devices), and with the main LED-screen fully illuminated, to make sure the unit isn't prone to brownouts
		. if brownout does occur, then increase the uF value on the 5v regulator-assembly's capacitors

	. if working with an SD-card distributor: get a copy of the authorization letter that certifies the relationship with the brand they're selling
		. also: get the upstream brand to confirm the distribution relationship
	. make sure to buy extra SD-cards in case people need replacements

	. order all parts by copy-pasting part-names from the master parts-list, to avoid mental errors (like missing the inner second "P" in "ATMEGA328P-PU")

	. every unit should have its own serial-number written onto a sticker somewhere on its circuit-board

Packaging:

	. look into services that create custom-printed, custom-sized cardboard boxes
		. any DIY kits will have to be sealed tightly so parts don't escape during transport
			. will just have to use plastic baggies for this probably
				. look into bulk suppliers for anti-static plastic baggies
		. fully-assembled units won't need baggies, but will still need a way to retain loose elements (stickers, manual, et al)

	. look into manual-printing services

	. look into getting "savefile-location templates" printed, so users can write down which of their songs corresponds to which savefile-location

	. look into custom stickers and various other goodies
