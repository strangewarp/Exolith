
Tine TODO

Software:

	. get rid of BASENOTE: not enough utility for the complexity it adds
		-- am doing
	. get rid of BASENOTE's GUI-glyph, command-function, CmdFunc entry, and global var
		-- done, done, done, done
	. change around other commands' keychords to compensate for this
		-- fixed
	. wipe P.DAT from the testing SD-card, as its contents are now outdated
		-- done
	. change the function that constructs P.DAT, as its total number of bytes has changed
		-- done
	. remove "todo update" notes from button-key.txt again
		-- done

	. re-test and verify record-mode keychords, in light of how everything was changed by BASENOTE-removal
		-- 

	. re-test everything
		. regular notes: recording & playback
			-- works
		. note-erasing in RECORD-MODE
			. regular erasing
				-- seems to work
			. only erases notes from the current CHAN?
				-- yes
		. BASENOTE and OCTAVE
			-- yes
			. does BASENOTE clamp at B?
				-- yes
		. REPEAT
			-- works
		. SHIFT RECORD-SEQ
			-- 
		. COPY/PASTE:
			. straightforward standard usage
				-- 
			. with COPY size too long for PASTE size (should be discarded)
				-- 
			. with COPY size too short for PASTE size (should repeat until the end of the PASTE area)
				-- 
			. with COPY in another sequence than PASTE
				-- 
		. duophony
		. various QUANTIZE settings
		. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
		. test SEQ-SIZE behavior
			. does a SEQ-SIZE of "0" correspond to 1 beat?
		. test CC commands
		. test file-load
		. test auto-loading of most recent savefile on startup
		. test that the number of the savefile is displayed correctly on startup
			. also for savefiles in file-slots >= 100

	. re-test all cue-commands
		. OFF
		. CUE
		. SLICE
		. CUE (with SLICE-offset insertion)
		. CUE OFF
		. PAGE OFF
		. SCATTER (amount)
		. SCATTER UNSET
		. PAGE SCATTER UNSET

	. test gesture system
		. test LOAD-MODE TOGGLE
		. test GLOBAL PLAY/STOP TOGGLE

	. gestures sometimes have a sloppy response. figure out why

	. update gui-key.txt
		. include button and LED spec for LOADMODE

	. convert all multi-byte Serial.write() commands into batch Serial.writes with a buffer-array of bytes, to totally rule out the possibility of serial lag

	. fill 12 sequences with notes, and check whether lag occurs when connected to a hardware synthesizer

	. need visible GUI element for which page is active, now that both are visible simultaneously
		. should blink between all-LEDs-on and regular-LEDs-on when any PAGE command is held, highlighting the active page
		. should blink one final time on the new page, after the page is selected, using a timer to control how long the ON-block should be OR'ed to regular LEDs

	. when the OFF button is used to wipe the cues from a cued seq, does that cued seq refrain from any activity correctly?
		. if a new cue is set for the same seq, as the seq's first action after such a situation, then does the cue act as expected?

	. does BPM change the savefile correctly?
		. is it loaded in correctly, on startup, after being changed by the user?

	. does HUMANIZE apply to REPEAT notes correctly?

	. add PROGRAM CHANGE functionality (in addition to CONTROL CHANGE)
		. make sure any button-press global-var changes to the CHAN and CC commands don't interfere with this
		. enabling PC should set the CC bit to 0, and enabling CC should set the PC bit to 0

	. when two note-buttons are simultaneously held during ARMED RECORDING, are they recorded simultaneously?
		. what if more than two are held?
		. what if they're CONTROL-CHANGES?
			. two held?
			. more than two?
		. what if they're PROGRAM-CHANGES?
			. two held?
			. more than two?

	. soak-test the sequencer to test whether ABSOLUTETIME wrap-arounds work correctly (these should occur every hour or so)

	. when SCATTER, SCATTER-UNSET, PAGE-SCATTER, or PAGE-SCATTER-UNSET is held, the GUI should show only those sequences that have SCATTER states enabled

	. do very slow BPMs have the expected tick-length?
	. test whether very fast BPMs have any lag

	. if lag-reduction is necessary...
		. try moving the MAX7219 onto the SPI pins and using LedControl_HW_SPI immediately?
		. make sequences monophonic?
		. limit maximum BPM to 160?
		. change max note-granularity to 8th-notes?
		. remove MIDI CLOCK?
		. remove MIDI IN?
		. remove or greatly simplify SCATTER system?

	. test "toggle to next/prev sequence" in RECORD mode

	. change func_gui.ino:
	. add GUI prompt for current RECORDSEQ value? (RECORD MODE)
	. cue a BLINK whenever the RECORDSEQ reaches its 0th position

	. display SCATTER status only when a SCATTER chord is held

	. make sure that, when a deeper savefile is loaded, there's no extra lag for whatever reason

	. reduce max sequence-size to 32 whole-notes, to cut down on potential read-lag?

	. test MIDI-IN (notes)
	. test MIDI-IN (clock)
		. add a "DO NOT SEND CLOCK SIGNALS" user-flag to the CLOCK MASTER/FOLLOW mechanism

	. BPM should be accessible in both PLAY MODE and RECORD MODE?
		. only write BPM to file when toggling into RECORD MODE, or when changing the value if RECORD MODE is currently active

	. replace bloated LedControl with optimized custom functions
		. replace LedControl with LedControl_HW_SPI???
			. either a simplified version of LedControl_HW_SPI, or a simplified version of LedControl, but either way, it needs to directly address port-registers

	. double-check all functionality for sequences on the second-page

	. edge-case testing:
		. does RECORD MODE work right:
			. when the sequence is loaded with SCATTERs and CUEs?
			. in MIDI FOLLOW mode?
			. for sequences with a weird tempo/slice offset from the global cue?

	. survey all TO_UPDATE calls, for superfluous flags

	. check whether sequences can actually function with non-multiple-of-2 lengths

	. add SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?

	. add a command to shift the position of the global cue-point?

	. add a command to change the global cue-point's granularity? (e.g. being 3 beats, or 7 beats, instead of 8 beats, and ignoring the extra LEDs)

	. very rarely, the tempo will be far too fast upon power-up. figure out why

	. re-test problem areas:
		. GLOBAL PLAY/STOP
		. MIDI-IN
		. GLOBAL PLAY/STOP under conditions of complex MIDI-IN

	. double-check that there are no remaining "todo" or "test" comments in the codebase
	. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
	. double-check that everything compiles correctly in the latest version of Arduino
	. test overloading the 8-events-per-tick system
	. test overloading the SUSTAIN system with simultaneous sequencing and notes-from-RECORD-MODE
	. test overloading the MIDI-IN system
	. update "VERSION_TEXT" to "1"
	. soak-test the physical prototype

Hardware:

	. test breadboarded prototype with shared-SPI-line layout (and two digital SPI-select pins), for LedControl_HW_SPI lag-reduction
		. remember, when rebuilding breadboard, to follow this error-prevention process:
			. print out schematics for reference
			. check off schematic elements with a pencil (both components and wires) as they are added
		. if this doesn't work:
			. rewrite LedControl to directly address port-registers, thereby eliminating a lot of lag-time
		. if this works:
			. rewrite LedControl_HW_SPI to directly address port-registers, thereby eliminating a lot of lag-time and freeing up two pins
			. update both KiCad and firmware to reflect the changes
			. two pins will be freed up by this, so reassign them:
				. possibilities:
					. using both pins with a simple diode-and-resistor circuit to drive a vibration motor
						. motor will be connected via screw-terminals and epoxied to the left side-panel
							. make sure the screw-terminals are small enough to fit between the boards, or there's a void cut in the bottom-board for it or something
						. if each pin has a resistor in series with a diode, then two pins will produce three vibration frequencies
							. this will give the user better intuitive moment-to-moment feedback about the current beat-subdivision in RECORD MODE
						. if this is chosen rather than the LEDs, then:
							. add a two-slot screw-terminal to the bottom-board, within wire-range of the vibration-motor's epoxying position
							. change the position of the shrouded AVR-ISP header to be set behind the right side-panel,
								so the user doesn't end up causing metal-fatigue while awkwardly removing the motor's panel for firmware updates
							. in the codebase:
								. every vibration-event should have a STRENGTH and a COUNTDOWN TIMER, which could both be stored in a single global byte
								. should vibrate at the following times:
									. in time with the tempo, in RECORD-MODE
									. whenever a button is pressed
									. whenever a CUE event is processed
					. OR: using both pins to drive digital LEDs that represent MIDI-IN and MIDI-OUT, thereby reducing the parts count
						. pin 1: digital MIDI-IN indicator (NOTEs only)
						. pin 2: digital MIDI-OUT indicator (NOTEs only)
			. if 74HC14N ends up with free slots: add another buffering stage to the OUT line, and make the THRU port into a switchable THRU/OUT2 port
		. put the results of this line of inquiry into the "update KiCad file" task

	. double-check that the indicators have protection-diodes and protection-resistors on them
		. protection-resistors in front of each first transistor's base terminal
		. protection-diodes between the MIDI data-lines and the first protection-resistors

	. device could have 3 MIDI-OUT ports through various means:
		. removing the analog MIDI I/O indicators, and using their 74HC14N slots for chained buffering
		. adding a second 74HC14N chip, for chained buffering

	. note: this task may no longer be necessary, but keeping it until I'm sure:
		. test MIDI-IO LED circuit with 0.1uF & 1uF capacitors
			. or with 1k/10k resistor from cap+ to GND
			. if it's as bright as the current kind, then: change KiCad schematics & PCBs & Mouser order to reflect this

	. if still using current standoff lengths, then MIDI ports will require another mm of vertical space
		. therefore: put 1mm-thick spacers on every standoff and compensate for this in all side-panel sizes accordingly

	. update KiCad/Inkscape files:
		. both boards:
			. should be 4mm to 10mm wider, to better accomodate standoffs and MIDI ports, and to allow a bit more trace space around the new header-position
			. double-check that the stacking-headers on the bottom-board and top-board share their corresponding positions
			. change standoff hole-sizes to M3, plus extra kerf to compensate for standoff screws always being slightly over-size due to their threading
				. make sure there's still enough room for all M3 screws & standoffs
				. change official parts-list to reflect this decision
			. change all stacking headers to occupy a 2x20 horizontal row between the buttons and LEDs, to make the assembly process less fragile
			. move model-number text to bottom-board - if it were still on the top-board, any sort of transparent plexiglas would make it look tacky
				. model-number text should be in the following format:
					. basilisk tine sequencer
					  production run number - production run name
						. e.g.
							. basilisk tine sequencer
							  1 - philosopher's stone
			. reduce boards' size, to fit the results of various changes
			. change all edge-cuts to reflect the rearrangement of ports/standoffs, if applicable
			. double-check that ports aren't competing for space with standoffs
		. bottom-board:
			. reduce board-size to use only the two frontmost pairs of screws?
				. would need to either perfectly compensate for size discrepancies in the backmost standoffs,
					or have two tiny squares of "dummy board" between the backmost standoffs,
					to keep the vertical kerf in check
			. reduce thermal-plate size to accomodate new smaller heatsinks
			. use regular-sized capacitors, in a laying-down position, because people replacing capacitors wouldn't have special tiny ones sitting around
			. socket all capacitors, to futureproof the capacitor-replacement process
			. move shrouded AVR-ISP jack to front-left edge of bottom-board, to prevent any need to muck around with safety-caps
			. SD-card should be on the right side of the front-panel
			. update R-SET resistor's value based on the new diffused LEDs
			. socket the R-SET resistor, to futureproof against any possible changes to the top-board LEDs
			. move POWER-LED to center of bottom-board, and use a high-brightness white LED with a very wide visibility-cone
		. top-board:
			. remove AVR-ISP jack and associated headers from top-board
			. remove POWER-LED from top-board

	. buy grounding-bracelets to use while soldering beta prototypes, and while assembling finished units

	. use different button-cap color for control-row?

	. make sure to use B3F-5050 buttons in finished unit; these have a longer life than B3F-4050 buttons

	. use different-color button caps on the note-keys, to differentiate between "white notes" and "black notes" like on a piano

	. redo all Inkscape files for enclosure, making sure to retake all measurements & repeat the KiCad-to-Inkscape vector paste process

	. look into rubber adhesive nubs, for protecting the screws on the underside, & preventing any scratching/wear of surfaces

	. make sure that the SD-cards are capable of high-speed transfer, and are shipped in a state identical to what results from the SD Association formatter utility

