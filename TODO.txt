

Tine TODO

Software:

	!!! DO NOT CHANGE list:
		-- RECORD TOGGLE's glyph and ERASE WHILE HELD's chord need to conflict, so that the file.sync() on ERASE WHILE HELD's key-up doesn't get skipped when toggling
			-- if the key-chord for ERASE WHILE HELD is changed, then the file.sync() call in unassignKey() must also be changed

	. prove I'm not a dipshit: actually finish the project

	-- restructured some functions in func_timer.ino

	. change SWING:
		. remove recordable SWING-commands
			-- done
		. change the UPPER CHANNEL BITS CmdFunc to exclude the block that was previously taken up by recordable SWING commands
			-- done
		. update data-key.txt accordingly
			-- done
		. remove table of constants related to SWING
			-- done
		. simplify the way tempo is calculated
			-- done
		. change SWING AMOUNT and SWING GRANULARITY CmdFuncs, to deal with 32nd-notes rather than abstract swing-values
			-- done
		. change files so that SGRAN and SAMOUNT are saved as global prefs, rather than per-file prefs
			-- done
		. actually just remove all remnants of SWING, SGRAN, and SAMOUNT, since this can't even be repurposed for recording without getting too hairy:
			. remove SGRAN/SAMOUNT vars
				-- done
			. remove SGRAN/SAMOUNT CmdFunc entries, and move other CmdFuncs to compensate
				-- done
			. remove SWING glyphs, and update manual glyph calls
				-- done
			. remove SWING-related top-row GUI events
				-- done
			. remove SWING CmdFuncs themselves
				-- done
			. remove SGRAN/SAMOUNT file-vars (P.DAT, functions that modify P.DAT, prefs-format.txt, etc)
				-- done
			. change button-key.txt to remove SWING commands
				-- done
		. add a global "OFFSET" var, to change QUANTIZE's base-point
			. add the OFFSET var itself
				-- done
			. change button-key.txt to add OFFSET
				-- done
			. add a CmdFunc entry for it, and move other CmdFuncs to compensate
				-- done
			. add an OFFSET glyph, and update manual glyph calls
				-- done
			. add an OFFSET-related top-row GUI event
				-- done
			. add the OFFSET CmdFunc itself in func_cmds.ino: OFFSET should also be bounded by QUANTIZE
				-- done
			. add OFFSET's functionality to the recording-mechanisms: positive or negative offset gets applied to the base QUANTIZE-point
				-- done
			. the logic that decides whether or not to play a note while recording in realtime, should also apply the OFFSET value
				-- no changes are necessary here, since processRecAction() checks only for presence on the current tick, in this regard
		. update timing system to be based on floats rather than integers
			-- done
	. test OFFSET system
		-- OFFSET didn't display its top-row GUI correctly. already fixed it
	. test again
		-- OFFSET doesn't get applied to REPEAT-notes
		. fix it
			-- REPEAT-notes get triggered on every 32nd-note
			. figure out why
				-- logic-flow error: getInsertionPoint() was checking for the absence of REPEAT, which interfered with the repeat-mechanism's boolean check
	. test again
		-- REPEAT works now, but OFFSET still isn't being applied
		. figure out what's going on
			-- everything is a morass. time to rewrite the OFFSET/QUANTIZE system again
	. rewrite the relevant portions of the OFFSET/QUANTIZE system
		-- ok
	. re-test OFFSET-REPEAT
		-- OFFSET only works when it contains a value of -2 or -1.
		. figure out why
			-- might have gotten fixed
		-- also, OFFSET-REPEAT notes are playing an extra note, the tick after their correct note.
		. figure out why
			-- it was the goddamned testing apparatus
	. test OFFSET-REPEAT with various values again
		-- it seems to work relatively well when QUANTIZE is 8...
		-- ... but when QUANTIZE is 4, it doesn't trigger at all when held (at OFFSET values of -1, 0, 1, 2, it still works, though)
		. figure this out
			-- if OFFSET is more than half of QUANTIZE, then it doesn't work, regardless of QUANTIZE value
			. what would be causing this?
				-- isInsertionPoint() was throwing false-negatives
				. test it more thoroughly now, with steady backing beats of various granularities
					-- seems to work, but:
					-- OFFSET's GUI feels "backwards" - tabbing "right" makes the offset "earlier" - "right" should mean "later"
					. change this and test it
						-- seems fixed
	. test OFFSET-QUANTIZE (no REPEAT) while recording notes
		-- OFFSET-QUANTIZE has its time-offset shifted in the opposite direction from OFFSET-REPEAT
		. fix this
			-- 
	. check whether OFFSET conflicts with manual-mode DURATIONS (DURATION=129)
		--
		. if yes, then: decide whether to compensate for this outright, or to stop it from being applied to manual-mode durs
			--

	. add DURATION-HUMANIZE
		-- am doing
		. add keychord to button-key.txt
			-- done
		. shift REPEAT-SWEEP to a different keychord, to free up DURATION-HUMANIZE's ideal keychord
			-- am doing
			. change REPEAT-SWEEP's CmdFunc placement
				-- done
			. change REPEAT-SWEEP's related GUI-func calls
				-- done
		. add CmdFunc listing
			-- done
		. shift other CmdFunc listings
			-- done
		. add glyph
			-- done
		. shift manual calls to other glyphs in func_gui.ino
			-- done
		. add DURATION-HUMANIZE GUI mechanisms for top row and bottom rows
			-- done
		. add DURATION-HUMANIZE's CmdFunc itself, to func_cmds.ino
			-- done
		. add DURATION-HUMANIZE behavior to all notes in RECORD-MODE
			-- done
		. remove "todo update" notes from button-key.txt
			-- done
		. test DURATION-HUMANIZE
			-- seems to work perfectly

	. when DURAION is in manual (=129), and REPEAT is enabled, no notes can be played in RECORD MODE...
	. apply fix: in this situation, REPEAT behavior should occur, with the note's duration being the QUANTIZE size minus 1
		--

	. save OFFSET and DURATION-HUMANIZE to the PREFS-file
		--
	. load OFFSET and DURATION-HUMANIZE when the PREFS are loaded
		--

	. limit the number of savefiles to 48 total:
		. is LOAD-MODE even necessary at this point, wrt the possibility of simply using the PAGE system?
			--
			. if no:
				. make LOAD into a PLAY-MODE keychord
				. remove the LOAD MODE section from gui-key.txt
			. either way:
				. change everything in func_file.ino
				. change all of LOAD-MODE's behaviors
				. change LOAD-MODE's GUI functions

	. when two notes on the same channel with the same pitch are in the SUSTAIN queue, the nested NOTE-OFF does not behave as expected with most synths
	. therefore, a change is necessary:
		. whenever a note is about to be added to the SUSTAIN queue, check whether that chan/pitch combo is in SUSTAIN already.
		. if so: send a NOTE-OFF for that note, remove its SUSTAIN entry (and shift other entries accordingly), and then and only then insert the new SUSTAIN entry

	. change number of TRACKS per seq to 4 instead of 2? (chords, more complex runs, etc)
		--

	. change the "note-name" display in RECORD-MODE so that it displays the highest held-note when one of the held-notes is released
		--

	. test long-sequence timed cues and beatslicing
		--

	. test REPEAT-SWEEP on:
		. recording regular MIDI commands
			--
		. recording special MIDI commands
			--
		. recording BPM commands
			--

	. re-test all tricky recording mechanisms
		. ERASE WHILE HELD on TRACK 2
		. CLEAR SEQ clears notes in the correct size-window?
		. CLEAR SEQ clears both tracks simultaneously?
		. SEQ POSITION
		. SWITCH RECORDSEQ

	. reassign the RECORD-MODE control-commands to make logical sense (draw a chart to help with this, if necessary)
		. change button-key.txt:
			. RECORD, REPEAT, and TRACK should be conceptually connected
			. CHAN and UPPER-CHAN should be conceptually connected
			. OCTAVE, VELOCITY, DURATION, HUMANIZE, and QUANTIZE should be conceptually connected
		. change KEYTAB array for this
		. change RECORD-MODE GUI routines for this

	. re-test things
		. are old notes being knocked out of the sequence by new notes in RECORD-MODE properly?
		. test manual MIDI-OFF commands:
			. keystroke-based
			. recorded
		. test CC/PC/other advanced MIDI commands
			. with REPEAT-SWEEP active
			. with arpeggiation
		. test file-load
			. test sequence-position preservation on load
			. test this with oddly-shaped seqs, and seqs that will definitely wrap
		. test auto-loading of most recent savefile on startup
		. test that the number of the savefile is displayed correctly on startup
			. also for savefiles in file-slots >= 100

	. re-test all cue-commands
		. OFF
		. CUE
		. SLICE
		. CUE (with SLICE-offset insertion)
		. CUE OFF
		. PAGE OFF
		. SCATTER (amount)
		. SCATTER UNSET
		. PAGE SCATTER UNSET
		. double-pressed commands, of the same or different types, to check for unexpected behaviors

	. test LOAD MODE fully:
		. check toggling into/out of LOAD MODE from both PLAY MODE and RECORD MODE
			. PLAY MODE:
				. check toggling LOAD MODE when seqs are playing
				. check toggling LOAD MODE when seqs have active cued-commands
			. RECORD MODE:
				. check toggling LOAD MODE when RECORDNOTES is armed / when REPEAT is active / both
		. check that all possible edge-case sequences on all pages load correctly

	. test MIDI-IN (notes)
		. are notes recorded correctly in RECORD-MODE?
		. are notes recorded only when RECORDNOTES is armed?
		. make sure that notes are not erroneously recorded when PLAY MODE or LOAD MODE is active
			. especially after toggling into LOAD MODE from RECORD MODE with RECORDNOTES armed

	. reinsert a simple MIDI-IN (clock) system?

	. check whether sequences function correctly with non-multiple-of-2 lengths, under all RECORD MODE and PLAY MODE processes
	. check that, when a deeper savefile is loaded and is running many complex sequences, there's no extra lag for whatever reason
	. look at all note-recording routines again, to triple-check for any stupid mistakes that would lead to unnecessary wear
	. double-check that the BPM rate is actually accurate at various speeds
	. fill 12 sequences with notes, and check whether lag occurs when connected to a hardware synthesizer
	. does anything catastrophic happen when the SD-card is removed during regular operation?

	==== SOFTWARE BETA THRESHOLD ====

	. when the OFF button is used to wipe the cues from a cued seq, does that cued seq refrain from any activity correctly?
		. if a new cue is set for the same seq, as the seq's first action after such a situation, then does the cue act as expected?

	. when two note-buttons are simultaneously held during ARMED RECORDING, are they recorded simultaneously?
		. what if more than two are held?
		. what if they're CONTROL-CHANGES?
			. two held?
			. more than two?
		. what if they're PROGRAM-CHANGES?
			. two held?
			. more than two?

	. do very slow BPMs have the expected tick-length?
	. test whether very fast BPMs have any lag

	. double-check all functionality for sequences on the second-page

	. edge-case testing:
		. does RECORD MODE work right:
			. when the sequence is loaded with SCATTERs and CUEs?
			. in MIDI FOLLOW mode?
			. for sequences with a weird tempo/slice offset from the global cue?

	. survey all TO_UPDATE calls, for superfluous flags

	. add SONG POSITION POINTER functionality while in CLOCK FOLLOW mode, to orient the global cue-position correctly?

	. double-check that there are no remaining "todo" or "test" comments in the codebase
	. remove "THIS CODE IS UNDER DEVELOPMENT AND DOESN'T DO ANYTHING" from license-statement
	. double-check that everything compiles correctly in the latest version of Arduino
	. test overloading the 8-events-per-tick system
	. test overloading the SUSTAIN system with simultaneous sequencing and notes-from-RECORD-MODE
	. soak-test the physical prototype

	. add a note to tutorials on wear-leveling:
		. extreme repetitive use of note-insertion and CLEAR will lead to comparatively faster card degradation (~10 years, versus the card's natural material lifespan)

	. research how to back-up the contents of the SD-card in a manner that recombines the savefiles without losing their contiguous nature
		-- files could be copied off the disk manually, and then transferred back onto the disk file-by-file using XVI32 to paste their contents into blank files
		-- files could be copied en masse as a disk-image, and then reapplied en masse with a disk-imager
			. write a tutorial on both of these methods

Hardware:

	. clear/clean/update todo tasks
		-- done

	. PCB: change all capacitors to ULD2A100MED1TD spec: 2.5mm pin spacing, 6.3mm diameter.
		-- done
	. PCB: also change the edge-cut of the top-board, where the capacitors poke through. X: 71.12 or ideally 71.755.
		-- done
	. PCB: check sizes of the pin-holes for the B3F-4050 buttons, and if they're too small, slightly widen them to compensate for kerf. (just remembered that these were too tight on the alpha prototype)
		-- done: holes and pads both tweaked
	. PCB: change all standoff holes to be M3-sized, plus a bit of extra room for the threading
		. bottom-board?
			-- done
		. top-board?
			-- already did it and then forgot I'd done it
	. PCB: add stitched-vias and ground-planes to top-board
		-- done
	. PCB: make sure there is an actual screw-hole underneath each regulator
		-- afaict this is the case
	. PCB: to be extra thorough, overlay vector-drawings of both boards, and make sure the cross-board pins and capacitor placements align
		-- they do
	. PCB: change heatsink contact-pads to be approx >=13.21mm wide. they are currently much wider than they should be
		-- done
	. PCB: double-check that the DC-IN jack's pad-holes are large enough
		-- yes

	. brainstorm viability of building a virtual SD-card-socket out of through-hole components, so that DIY kits require no SMD soldering
		-- would be too complex and finicky even under ideal conditions. sticking with the SMD SD-card-socket

	. export gerber files, remembering to double-check that all necessary layers are being exported (edge cuts, silkscreen [both sides for topboard], etc)
		-- done
	. order circuit-boards
		-- done

	. order parts
		-- done

	. look into other, cheaper, industrial-grade SD-cards. track down their rewrite hardiness on their manufacturer websites
		-- OK
	. make a decision about which industrial-grade SD-card to use
		-- done
		. add it to:
			. "tine sequencer" Mouser project cart
				-- done
			. "master parts list" textfile (also, back up the textfile again)
				-- done

	. add text to back-panel of enclosure, to label MIDI ports
		-- done

	. check whether the MIDI ports require the "divot" in the enclosure's top-panel, if the design uses 6mm spacers
		-- it doesn't. divot removed.

	. order the industrial-grade SD-card and M2.5 spacers
		-- done

	. order the laser-cut enclosure
		-- done

	. double-check that the text diagrams in gui-key.txt accurately reflect the finalized LED-placement
		-- done

	==== HARDWARE BETA THRESHOLD ====

	. make sure that you order the ATMEGA chips with the proper bootloader fuse config (along with the firmware), or else they will be 8 times too slow and incapable of sending MIDI
		. buy a test-batch that are preprogrammed in such a way, and slot one into a Tine beta unit for testing

	. stress-test both MIDI-INDICATOR LEDs simultaneously, with heavy simultaneous IN/OUT signals (with OUT plugged into two devices), and with the main LED-screen fully illuminated, to make sure the unit isn't prone to brownouts
		. if brownout does occur, then increase the uF value on the 5v regulator-assembly's capacitors

	. if working with an SD-card distributor: get a copy of the authorization letter that certifies the relationship with the brand they're selling
		. also: get the upstream brand to confirm the distribution relationship
	. make sure to buy extra SD-cards in case people need replacements

	. order all parts by copy-pasting part-names from the master parts-list, to avoid mental errors (like missing the inner second "P" in "ATMEGA328P-PU")

	. every unit should have its own serial-number written onto a sticker somewhere on its circuit-board

Packaging:

	. look into services that create custom-printed, custom-sized cardboard boxes
		. any DIY kits will have to be sealed tightly so parts don't escape during transport
			. will just have to use plastic baggies for this probably
				. look into bulk suppliers for anti-static plastic baggies
		. fully-assembled units won't need baggies, but will still need a way to retain loose elements (stickers, manual, et al)

	. look into custom stickers and various other goodies
