

Tine TODO-ARCHIVE (to keep a record of already-finished tasks)

Software:

	. figure out why the savefile system defaults to file "04"
		-- loadPrefs() was missing a makePrefBuf() call, inside its "if (!sd.exists(pn)) ..." clause
		. check whether this fixes things
			-- seems to have fixed it

	-- found a UI bug: copyCmd had the wrong numerical value in KEYTAB[]

	. check whether there's an additional "MIDI Tempo" SYSEX command, or whether it's solely dictated by TEMPO TICK events
		-- yeah but it's a 4-byte SYSEX command. so...
		. change all sequencing mechanisms in the following ways:
			-- am doing
			. BPM command is now a 2-byte command, in the format of "240 x 0":
				. "x": the BPM value (bounded to 16-200)
					-- ok
			. change note-entry system to allow BPM commands to be entered
				-- done
			. when a BPM command is encountered by the sequencing mechanism, only change the internal BPM value; do not actually send anything to MIDI-OUT
				-- done
			. anything that checks for 2-byte or 3-byte commands, or command-type in general, needs to be double-checked for conflicts with the BPM command type
				-- ok

	-- also moved the MOUT_COUNT checking mechanism into parseTickContents(), since every BPM-CHANGE needs to be caught, regardless of how full MOUT_COUNT gets.
		-- this hypothetically slightly reduces performance, could revert it later if I need to

	-- updated chanCmd() to compensate correctly for the validity of command-values of 240
	-- updated upperBitsCmd() similarly

	. make the BPM command accessible through both PLAY MODE and RECORD MODE, with the same control-button chord
	.     (this is especially necessary so the user can compensate for blunders related to slicing into a bad BPM during a performance)
		-- am doing
		-- chord number: 010001 (in-code: 100010)
		. update button-key.txt
			-- done
		. change BPM's behavior in assignKey() et al
			-- am doing
			. for PLAY MODE
				-- done
		. change BPM's key-chord in RECORD MODE
			-- done
			. change command-lists in data_cmds.ino
				-- done
		. add a "BPM" indicator to the GUI for PLAY MODE
			-- done
		. change the "BPM" case in the GUI for RECORD MODE
			-- done
		. remove "todo update" entries from button-key.txt
			-- done

	. add "BPM" glyph to PLAY MODE's BPM command
		-- am doing
		. update TO_UPDATE flags in unassignKey() and parsePlayPress() to cover the bottom 6 rows as well
			-- done
		. update GUI parser in updatePlayBottomRows() to display the BPM-glyph when a BPM chord is held
			-- done

	-- fixed a one-off error for the "col" value in the call to tempoCmd() from parsePlayPress()
	-- fixed the manner in which updatePlayBottomRows() displays the TEMPO glyph when PLAY MODE's BPM command is held
	-- made the BPM sigil appear in PLAY MODE at all the correct times

	. unknown command-types in RECORD MODE need to set a TO_UPDATE flag for the bottom 6 rows (currently seems to only flag top row)
		-- fixed: it was a mismatched value in the KEYTAB array

	-- found and (probably) fixed a bug where all sequenced notes were acting like they had a duration of 0
	-- changed writeCommands() to correctly overwrite BPM-change commands
	-- fixed the ERASE WHILE HELD glyph to change its appearance depending on whether note-recording is active

	-- updated the MIDI-IN system to only call file.sync() once per tick max, to save on SD-card wear (still requires testing)
	-- increased the length of the BLINK that occurs on each QUANTIZE tick in RECORD MODE

	. change REPEAT so that held chords are recorded into TRACK 1 & 2 simultaneously
		-- done
	. in RECORD MODE, BLINK should only illuminate the half of the screen that corresponds to the current TRACK
		-- done

	-- made recording-blinks longer in RECORD-MODE
		-- tweaked the duration for this again

	. redesign the top LED-row in RECORD MODE:
		-- am doing
		. the quantize-tick should only be displayed in LEDs 5 and 6
			-- done
		. the currently-active TRACK should be displayed in LEDs 7 and 8
			-- done

	-- refactored the "flip number values into correct format" line in parsePlayPress()
	-- fixed a labeling mistake in button-key.txt
	-- removed superfluous parentheses from updateGlobalRand()

	. since the meaningful GUI signifiers for QUANTIZE and TRACK are now being handled by the BLINK system...
		. in RECORD MODE, change the top GUI row to only show the global-cue's current beat
			-- done
		. in PLAY MODE...
			. change the top GUI row to only show the global-cue's current beat
				-- done
			. if PAGE B is active, then invert the second GUI row's illumination
				-- done
		. change all TO_UPDATE calls related to these things
			-- done

	-- lightly refactored updateSecondRow()
	-- fixed some slight bad text-formatting in buttons-key.txt

	. add a QRESET command, which will reset QUANTIZE's anchor point every n ticks
		-- am doing
		. change the REPEAT system to make this distinction
			-- done
		. change all related BLINK and TO_UPDATE calls
			-- afaict done
		. change the prefs-file routines to add a QRESET slot
			-- done
		. change all relevant GUI calls
			-- done
		. add CmdFunc and glyph for QRESET
			-- done
		. add GUI routines for QRESET
			-- done

	. wipe the SD-card again before testing, since the prefs-file format has been changed
		-- ok

	-- added a blink effect whenever a note is played in RECORD-MODE, regardless of whether RECORDNOTES is armed

	. write a stripped-down replacement for LedControl, to save RAM space
		-- am doing
		. write "initialize" and "send line" functions
			-- done
		. change updateGUI() to open and close the MAX72** chip's data-latch on digital pin 6
			-- done
		. change all GUI-related functions to use sendRow() instead of LedControl calls
			-- done

	. new LED system doesn't work. figure out why
		-- figured it out: every row-send command must be surrounded by its own set of CS-pin latch commands. these are now in sendRow()
		-- also might have been that sendRow() requires "volatile byte" typing. this is mysterious. leaving it in to be thorough

	-- removed an extraneous PORTD call from maxInitialize()

	-- slightly lengthened the BLINK duration when a note-key is pressed in RECORD-MODE

	. GUI is non-responsive after powering back up. figure out why
		-- still not sure of the exact cause, but, fixed it by restructuring maxInitialize(), sendRow(), and creating sendMaxCmd()

	-- found and fixed a SCATTER bug in parseScatter() even though I'm not testing that yet
	-- added clarification to a readTick() call inside of getTickNotes(), since it could easily be mistaken for a SCATTER bug

	. QUANTIZE/QRESET don't hit the right ticks when containing unusual values. fix it
		-- am doing
		. seems to go out of whack specifically when QRESET is at a value lower than 32. what's causing this
			. wait... is this just the testing apparatus again, combined with some user error (selecting QRESET of 8 when I thought it was 16)?
			-- this is the third time this has happened
			-- horrible. horrible. the bug never existed in the first place

	-- fixed a glyph-display error for PLAY MODE's BPM command

	. in PLAY MODE, BPM conflicts with CUE-OFF
		. this means:
			. the PLAY MODE section of button-key.txt is actually reversed, except for the "BPM" entry. fix it
				-- done
			. the BPM command needs to be mirrored to (top-down) 100010
				-- am doing
				. update CmdFunc system for this
					-- done
				. update GUI routines for this in PLAY MODE and RECORD MODE
					-- done
			. the QRESET command, which takes up (top-down) 100010 in RECORD MODE, needs to be moved to (top-down) 010010
				-- am doing
				. update CmdFunc system for this
					-- done
				. update GUI routines for this in RECORD MODE
					-- done

	-- replaced other references to the outdated BPM keychord in func_gui.ino
	-- removed the BLINK event on any BPM modification in PLAY MODE, for UI consistency
	-- refactored BLINK and TO_UPDATE flags in parsePlayPress()

	. test: do the repositioned QRESET and BPM commands work right?
		-- yes
	. has OFF CUE 0 been freed up correctly?
		-- yes

	. change the BLINK system:
		. divide BLINK into BLINKL and BLINKR, which are decremented in the same way that BLINK is
		. (BLINKL and BLINKR will simplify the need to show notes playing on tracks in RECORD MODE)
			-- ok
		. rewrite func_timer.ino to decrement both BLINKL/R types simultaneously
			-- done
		. rewrite all BLINK commands to flag BLINKL, BLINKR, or both, depending on context
			-- done
		. rewrite GUI routines to remove situational cruft, and to instead follow BLINKL and BLINKR straightforwardly
			-- done

	. when RECORD MODE is active, and RECORDNOTES is unarmed, and REPEAT is not active,
	.     a BLINK should occur for every note playing on each of the two tracks within the seq
	. (this will allow users to quickly know which track a seq's notes are playing on, because nobody can be expected to remember that, and it gets frustrating)
		-- done

	. test GUI changes
		. RECORD MODE [blink on note presence by track]
			-- forgot to include a TO_UPDATE call after the BLINK-setting mechanism in parseTickContents()
			. test again. does it work?
				-- both inaccurate blink-timing, and incomplete blink-shape in UI
				. what's causing inaccurate blink-timing?
					-- incorrect manipulation of the contents of BLINKL/BLINKR in updateRecBottomRows()
				. what's causing incomplete blink-shape?
					-- incorrect manipulation of the contents of BLINKL/BLINKR in updateRecBottomRows()
		. BLINKs during REPEAT
			-- seem ok
		. RECORDNOTES flag's impact on BLINK style
			-- seems correct
		. BLINK's response to TRACK-switching
			-- seems correct
		. CUE commands in PLAY MODE
			-- seems fine

Hardware:


